package ui;

import data.*;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Ellipse2D;
import javax.swing.ImageIcon;
import javax.swing.JPanel;

public class ChessBoard extends JPanel implements MouseListener, MouseMotionListener{
    public Board currentBoard;
    
    public ChessBoard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 453, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 453, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    private String piecePath(char piece){
        String path="/resources/boardIcons/";
        char piecesLowerCase[]={'p','k','q','b','n','r'};
        String swapLowerCasePath[]={"whitePawn.png","whiteKing.png","whiteQueen.png"
                ,"whiteBishop.png","whiteKnight.png","whiteRook.png"};
        String swapUpperCasePath[]={"blackPawn.png","blackKing.png","blackQueen.png"
                ,"blackBishop.png","blackKnight.png","blackRook.png"};
        if(Character.isLowerCase(piece)){
            for (int i = 0; i < 6; i++) {
                if(piece==piecesLowerCase[i])path+=swapLowerCasePath[i];
            }
        }else{
            char lowercased=Character.toLowerCase(piece);
            for (int i = 0; i < 6; i++) {
                if(lowercased==piecesLowerCase[i])path+=swapUpperCasePath[i];
            }
        }
        
        return path;
    }    
    
    public void setCurrrentBoard(Board b){
        this.currentBoard=b;
    }
    
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        int siz=56;
        for(int i=0;i<8;i++){
            for(int j=0;j<8;j++){
                if((i+j)%2==0){
                    g.setColor(Color.decode("#D5944F"));
                }else{
                    g.setColor(Color.decode("#DDA972"));
                }
                g.fillRect(siz*i, siz*j, siz, siz);
            }
            
        }
        if(currentBoard!=null){
            Square[][] gameBoard = currentBoard.getGameBoard();
            for(int i=0;i<8;i++){
                for(int j=0;j<8;j++){
                    if(gameBoard[i][j].getPiece()==null)continue;
                    char chr=gameBoard[i][j].getPiece().getPieceSign();
                    String path=piecePath(chr);
                    g.drawImage(new ImageIcon(path).getImage(), i, j, this);
                }
            }
        }
    
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        repaint();
    }

    @Override
    public void mousePressed(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        repaint();
    }
    
    
    
}
