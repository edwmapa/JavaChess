package ui;

import businessLogic.Chess;
import businessLogic.Functional;
import data.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Line2D;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JPanel;

public class ChessBoard extends JPanel implements MouseListener, MouseMotionListener{
    public static boolean movePerformed=false;
    private boolean dragged=false;
    private int ax,ay;
    public int mouseX=0,mouseY=0,newMouseX,newMouseY;
    public static ArrayList<ArrayList<Integer>>coordMoved=new ArrayList<>();
    
    public ChessBoard() {
        initComponents();
        addMouseListener(this);
        addMouseMotionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 448, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 448, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    private String piecePath(char piece){
        String path="/resources/";
        char piecesLowerCase[]={'p','k','q','b','n','r'};
        String swapLowerCasePath[]={"whitePawn.png","whiteKing.png","whiteQueen.png"
                ,"whiteBishop.png","whiteKnight.png","whiteRook.png"};
        String swapUpperCasePath[]={"blackPawn.png","blackKing.png","blackQueen.png"
                ,"blackBishop.png","blackKnight.png","blackRook.png"};
        if(Character.isLowerCase(piece)){
            for (int i = 0; i < 6; i++) {
                if(piece==piecesLowerCase[i])path+=swapLowerCasePath[i];
            }
        }else{
            char lowercased=Character.toLowerCase(piece);
            for (int i = 0; i < 6; i++) {
                if(lowercased==piecesLowerCase[i])path+=swapUpperCasePath[i];
            }
        }
//        System.out.println("Path:"+path);
        return path;
    }    
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        Graphics2D g2=(Graphics2D)g;
        int squareSize=56;
        for(int i=0;i<8;i++){
            for(int j=0;j<8;j++){
                if((i+j)%2==0){
                    g.setColor(Color.decode("#D5944F"));
                }else{
                    g.setColor(Color.decode("#DDA972"));
                }
                g.fillRect(squareSize*i, squareSize*j, squareSize, squareSize);
            }
        }
        
        Board currentBoard=Chess.retriveBoard();
        if(currentBoard!=null){
            Square[][] gameBoard = currentBoard.getGameBoard();
            for(int i=0;i<8;i++){
                for(int j=0;j<8;j++){
                    if(gameBoard[i][j].getPiece()==null)continue;
                    char chr=gameBoard[i][j].getPiece().getPieceSign();
                    String path=piecePath(chr);
                    Image chessPieceImage;
                    chessPieceImage=chessPieceImage=new ImageIcon(getClass().getResource(path)).getImage();
                    g.drawImage(chessPieceImage, j*squareSize, i*squareSize, squareSize, squareSize, this);
                }
            }
        }
        
        
        g2.setColor(Color.RED);
        g2.setStroke(new BasicStroke(5));
        g2.draw(new Line2D.Float(mouseX, mouseY, ax, ay));
        
        g.setColor(Color.GREEN);
        g.fillRect(mouseX-5, mouseY-5, 10, 10);
        
        g.setColor(Color.BLUE);
        g.fillRect(ax-5, ay-5, 10, 10);
    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {
        if(e.getX()<448&& e.getY()<448){//inside board
            mouseX=e.getX();
            mouseY=e.getY();
            repaint();
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if(e.getX()<448 && e.getY()<448){//inside board
            newMouseX=e.getX();//horizontal
            newMouseY=e.getY();//vertical
            if(e.getButton()==MouseEvent.BUTTON1){
                ArrayList<ArrayList<Integer>>fromTo=new ArrayList<>();
                ArrayList <Integer>coord=new ArrayList();
                coord.add((int)((8.0/448.0)*mouseY));//supposed to be integer
                coord.add((int)((8.0/448.0)*mouseX));//supposed to be characters
                fromTo.add(new ArrayList<>(coord));
                coord.clear();
                
                coord.add((int)((8.0/448.0)*newMouseY));//supposed to be integer
                coord.add((int)((8.0/448.0)*newMouseX));//supposed to be characters
                fromTo.add(new ArrayList<>(coord));
                coord.clear();
//                coordMoved=fromTo;
                coordMoved=fromTo;
            }
            movePerformed=true;
            repaint();
        }
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        ax=e.getX();
        ay=e.getY();
        repaint();
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }
    
}
